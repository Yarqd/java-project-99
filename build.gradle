plugins {
	id 'application'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'checkstyle'
	id 'jacoco'
}

group = 'hexlet.code'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Sentry dependency
	implementation 'io.sentry:sentry-spring-boot-starter:6.16.0'
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:6.25.0'
	implementation 'io.sentry:sentry-logback:6.25.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // Генерация отчёта после тестов
}

application {
	mainClass = 'hexlet.code.demo.AppApplication'
}

jacoco {
	toolVersion = '0.8.10'
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

checkstyle {
	toolVersion = '10.3'
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle) {
	reports {
		xml.required = false
		html.outputLocation = file("${buildDir}/reports/checkstyle/checkstyle.html")
	}
}
